# Copyright 2017 AT&T Intellectual Property.  All other rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
####################
#
# <servicename>_post.yaml - Site server design definition for physical layer
#
# clcp_post.yaml
# this is only applicable if cLCP .yaml exists

# cdp_post.yaml
# this is only applicable if cdp .yaml exists
#
#
# We will rely on  Bootstrap on each chart for some of teh Post Configuration.
# But in many cases will need to resort to this approach
#
# 
# And this approach for others that are more complex
#
#
####################
# version the schema in this file so consumers can rationally parse it
#
#
----
apiVersion: 'v1.0'
kind: TaskData
metadata:
  name: "DefautTaskData"
  Service:""  
  Feature:""
spec:
   #
   # Here we have all the Generic common stuff needed for Dag Tasks
   #
   
   

----
apiVersion: 'v1.0'
kind: TaskData
metadata:
  name: "name of the resource"
  Task: HostAggregate
  Parent: DefautTaskData
  Service:"cLCP"

spec:
    List of aggregates
    # Works for creating the aggregates
    # Solve for Server to Aggregate mapping?
    
    # How do we instruct the  DAG or is that Hardcoded in the flow 
    # Flag that instruct the DAG that it needs execute this after it creates the aggregates
    #  - implicit the existence of this resource 
    # 
    # Each server in the servers.yaml has the aggregate they should be associated with
    #
    # There might be some dependency on how this flag works based on the way AirFlow works.
----    
